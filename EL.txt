EL(Expression Language)은 자바빈의 프로퍼티, 값을 jsp의 표현식 <%= %>이나 
액션 태그 <jsp:UseBean>를 사용하는것 보다 쉽고 간결하게 꺼낼 수 있게 하는 기술이다.
또한 static 메소드를 호출할 수도 있는데 jsp 에서는 
주로 서블릿 보관소 (JspContext, ServletRequest, HttpSession, ServletContext) 에서 값을 꺼낼 때 사용한다.

${}
: JSP가 실행될 때 즉시 반영된다. 
객체 프로퍼티 값을 꺼낼 때 주로 사용
#{}
: 시스템에서 필요하다고 판단될 때 그 값을 사용한다. 
사용자 입력값을 객체의 프로퍼티에 담는 용도로 주로 사용

#${}와 ${}는 Spring과 MyBatis에서 사용하는 표현식 언어입니다.

${}: Spring Expression Language (SpEL)의 문법에서 사용됩니다. 
이것은 객체의 속성을 읽어오거나 메소드를 호출하는데 사용됩니다. 
예를 들어, model.addAttribute("name", "John");으로 모델에 속성을 추가하면, 
이 값을 JSP 페이지에서 ${name}으로 접근할 수 있습니다. 
그러나 ${}는 SQL Injection과 같은 보안 문제를 초래할 수 있기 때문에, 
사용자로부터 입력받은 데이터를 처리할 때는 주의가 필요합니다.

#{}: MyBatis에서 파라미터를 SQL 쿼리에 안전하게 삽입할 때 사용됩니다. 
MyBatis는 #{} 안의 값을 적절한 JDBC 타입으로 변환하고, 
PreparedStatement를 사용하여 쿼리를 실행하기 때문에 
SQL Injection 문제를 방지할 수 있습니다. 
예를 들어, SELECT * FROM users WHERE id = #{id}과 같은 쿼리를 사용할 수 있습니다.

${expr}
정수형 : ${10} <br>
실수형 : ${5.6} <br>
문자열형 : ${"박샘이"} <br> 
논리형 : ${true} <br>
null : ${null} <br>
표현 언어가 자바와는 다른 특징 중 하나는 null은 결과 화면에 공백으로 처리되는 점이다. 

객체 표현방식
${param.name} ->점으로 표현
${param["name"] } -> 더블퀘테이션 사용
${param['name'] } -> 싱글쿼테이션 사용

${header ["user-agent"] } ->속성명에 특수기호가 포함되어 대괄호 사용
${header.user-agent } -> 에러발생
${King['한글'] } -> 속성명이 한글이면 대괄호 사용
${King.한글} -> 에러발생 

내장 객체의 영역은 각 객체가 저장되는 메모리의 유효기간이다. 
자바 프로그래밍에서 메서드 내에서 선언된 변수는 메서드를 벗어나면 소멸되는데 
클래스 단위로 구성된
자바와는 다르게 JSP와 같은 웹 애플리케이션은 page 단위로 구성된다. 

내장 객체 영역의 종류는 총 4가지가 있다. 
page 영역
	동일한 페이지에서만 공유되고 페이지를 벗어나면 소멸된다. 
	즉) 하나의 JSP 페이지를 처리할 때 사용되는 영역
request 영역
	하나의 요청에 의해 호출된 페이지와 포워드(요청 전달)된 페이지까지 공유된다.
	즉) 하나의 요청을 처리할 때 사용되는 영역
session 영역
	클라이언트가 처음 접속한 후 웹 브라우저를 닫을 때까지 공유된다.
	즉)하나의 브라우저와 관련된 영역
application 영역
	한 번 저장되면 웹 애플리케이션이 종료될 때까지 유지된다.
	즉) 하나의 웹 어플리케이션과 관련된 영역 


