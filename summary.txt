// printf 출력문 형식


정해진 서식에 따라 문자열을 비롯한 여러 자료형을 출력
printf()는 괄호 안에 큰 따옴표("")로 모든 내용을 묶어 글자로 취급
중간에 다른 문자, 숫자 등의 값을 넣기 위해선 %c, %d 와 같은 지정 포멧으로 표시하며
그 대응 값을 입력한 포맷의 순서대로 큰 따옴표("") 우측에 콤마로 구분하여 입력한다
또한 줄 바꿈 등의 동작은 역 슬래쉬 n 등의 특정 제어자를 이용한다 (\n \t)


// 클래스 밖에 올 수 있는 3가지


package - .java 파일의 폴더(패키지)위치-default의 경우 폴더가 생성되지 않음


import - 다른 폴더(패키지) 위치의 클래스를 참조


외부클래스 (external class)
외부에 포함된 또 다른 클래스
public 키워드를 사용할 수 없음




// 클래스 안에 올 수 있는 4가지
필드 (멤버) - 클래스 특징(속성)을 나타내는 변수 (int age = 20)


메서드 (멤버) - 클래스의 기능 (void working(){...}) 리턴타입 + 메서드이름 + () + { } 로 구성


생성자
객체 생성 기능 (생성자이름 + () + ) { }) - 생성자의 이름은 클래스 이름과 동일하여야 함
메서드 이지만 반환형이 없는 형태이다


내부클래스 (inner class) (멤버)
클래스 내부 정의된 클래스




// 스택 영역: 이 영역은 메서드의 실행 과정에서 임시로 할당되는 메모리를 다룹니다
메서드를 호출할 때마다 각각의 스택 프레임이 생성되며,
지역 변수와 매개변수가 이 영역에 저장됩니다




// 힙 영역: 이 영역은 동적으로 생성된 객체를 저장하는 공간입니다
new 키워드로 생성된 객체와 배열이 이 영역에 할당됩니다




// 메서드(정적) 영역: 이 영역은 클래스 정보(클래스명, 부모클래스명, 메서드와 변수)와 함께
정적(static) 변수와 상수를 저장하는 공간입니다 이 영역은 JVM이 시작될 때 생성되며,
JVM이 종료되면 해제됩니다




// 불변 클래스(즉, 한 번 생성된 후에는 상태가 변경되지 않는 클래스)는
보통 set 메서드를 제공하지 않습니다
이러한 클래스의 객체는 생성시에 모든 상태를 할당받고
그 이후에는 변경되지 않습니다 따라서 set 메서드가 필요하지 않습니다


반면에 가변 클래스(즉, 생성된 후에 상태가 변경될 수 있는 클래스)는
보통 set 메서드를 제공합니다
이는 객체의 상태를 변경할 필요가 있을 수 있기 때문입니다


따라서 get 메서드와 set 메서드의 사용 여부는 클래스의 설계에 따라 달라집니다




// final의 정의


자바 언어에서 final은 오직 한 번만 할당할 수 있는 entity를 정의할 때 사용된다
final로 선언된 변수가 할당되면 항상 같은 값을 가진다
만약 final 변수가 객체를 참조하고 있다면,
그 객체의 상태가 바뀌어도 final 변수는 매번 동일한 내용을 참조한다
final을 클래스에서 사용하게 되면 그 클래스는 최종 상태가 되며
더 이상 상속이 불가능하다
이렇게 하면 보안이나 효율성 측면에서 장점이 있다
final클래스여도 필드는 setter 함수를 통해 변경은 가능하다
어떤 클래스를 상속하는데 그 안에 final 메서드가 있다면 오버라이딩으로 수정할 수 없다
즉) 메서드에 final을 사용하게 되면 상속받은 클래스에서
부모의 final 메서드를 재정의 할 수 없다




// super 정의와 용도


자식 클래스 인스턴스에서 부모 클래스 인스턴스를 가리키는 변수
1. 부모 생성자 호출 super()
2. 부모 클래스 멤버 호출 super.age,super/getAge()




// abstract 정의


실체가 없는, 구현되지 않은'의 의미
'기능이 없고, 선언만 되어 있다'라는 의미
클래스 : 추상 클래스로 사용된다.
멤버 메소드 : 추상 메서드로 사용된다.


추상 메소드(abstract method)
구현되지 않은 메서드, 즉 본체가 없는 메서드
예) run( );


구현 메서드(concrete method)
구현된 메소드, 즉 본체가 있는 메서드
예) run( ) {....}


추상 클래스 정의 .. 클래스 선언 시 abstract로 지정된 클래스


추상 클래스 특징
추상 클래스는 인스턴스 생성이 불가능하다.


추상 클래스 멤버: 멤버 변수, 멤버 메서드, 생성자, 추상 메서드
추상 메서드가 없어도 추상 클래스로 선언할 수 있다.
클래스의 멤버에 추상 메서드가 있으면 그 클래스는 반드시 추상 클래스로 선언해야 한다.
업캐스팅 타입으로 사용 가능하다.


추상클래스의 용도
하위 클래스에서 구현해야. 하는 기능을 상위, 클래스의 추상 메서드의, 형식을 빌려와
하위 클래스에서 구현 하는 방법으로 통일성과 강제성을 띈다 표준화가 가능함




// 내부 클래스 정의
다른 클래스 내부에 존재하는 클래스
class 외부 클래스명{
...
class 내부 클래스명{
...
}
}


특징
내부 클래스는 외부 클래스의 멤버에 자유롭게 접근할 수 있다
(외부 클래스 private 멤버도 내부 클래스에서 접근할 수 있다)




// final 정의와 용도


정의
'금지'의 의미를 가지는 지정자다


용도
클래스: 상속을 금지한다
멤버 메소드: 오버라이딩을 금지한다


멤버 변수: 값 변경을 금지한다(상수로 사용).


인터페이스 정의
interface 키워드로 선언된 추상 클래스


인터페이스 특징
추상 클래스가 발전한 개념이다
인스턴스 생성이 불가능하다
upcasting 타입으로 사용할 수 있다
멤버로는 상수, 추상 메서드만 허용한다
하위 클래스와의 관계는 inplements이다
하위 클래스에서는 여러 인터페이스를 동시에 implements 할 수 있다
자바의 단일 상속 기능을 보완할 수 있다


인터페이스 용도
기능만을 하위 클래스에 강제하기 위해 사용된다




// default 메소드


인터페이스의 메소드 중 하나는 일반 클래스의 메소드 처럼 동작이 정의 될 수있다
default 메소드를 활용하면 자바에서도 다중상속을 할 수 있다.




// 람다식


JDK 8 부터 도입한 함수형 프로그래밍 기법 중 하나
자바는 무명 구현 객체 대신에 람다식을 메서드의 인수로 사용하도록 허용한다
람다식은 메서드를 감싼 무명 구현 객체를 자바가 전달할 수 있는 코드 블록처럼 흉내 낸것
자바는 무명 구현 객체를 람다식으로 표현해 함수형 프로그래밍을 모방한 것
람다식을 사용하면 무명 객체보다 프로그램의 간결성 및 가독성이 향상된다


매개변수가 하나 있다면 괄호를 생략 가능하다
실행문이 하나라면 중괄호와 세미콜론을 생략 가능
단) 실행문이 return문이면 return 키워드도 생략


선언부, 2개 이상의 매개변수를 콤마로 연결할 수 있다
자바는 새로운 함수 문법을 정의한 것이 아니라 이미 있는 인터페이스를 빌어 람다식을 표현
함수적 인터페이스의 메서드만 람다식 표현 가능


리턴타입 메서드 이름(입력매개변수) {
메서드 내용
}
(타입 매개변수) -> {실행문; 실행문}




// 래퍼 클래스(Wrapper)


변수형 객체로 변수를 객체처럼 사용하기 위해 활용


특징: 변수 객체가 되기 때문에 다양한 메소드를 활용할 수 있다


단점: 변수 같지만 객체이기 때문에 저장된 데이터 활용을 위해 다시 자료형으로 되돌려야 한다
자료형 변수를 래퍼로 바꾸는 과정을 박싱(박스에 포장)
래퍼 클래스 객체를 자료형 변수로 바꾸는 과정을 언박싱 이라고 한다




// Generics


자바에서 Generics는 다양한 타입의 객체를 다루는 메서드나 컬렉션 클래스에 컴파일시 타입 체크를 해주는 기능입니다
Generics을 사용하면, 클래스나 메소드 내부에서 사용할 데이터 타입을 외부에서 지정할 수 있게 되어
코드의 재사용성을 높이고 타입 안정성 확보


List<String> list = new ArrayList<String>();


list 변수에는 String 객체만 추가할 수 있으며 다른 타입의 객체를 추가하려고 하면 컴파일 오류가 발생
Generics을 사용하면 프로그램의 타입 안정성을 보장


배열은 고정 된 크기의 동일한 타입의 요소들을 저장할 수 있습니다
Generics은 크기가 동적으로 변하는 컬렉션 ex) ArrayList, LinkedList 등 에 사용되며,
다양한 타입의 객체를 저장하고 처리할 수 있습니다
컬렉션은 객체를 저장하므로, 기본 데이터 타입은 사용할 수 없고 대신에
래퍼 클래스(Integer, Double, Character 등)를 사용해야 합니다
-- 필요에 따라 배열과 Generics을 혼합하여 사용하면 됩니다
특정 타입만 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록
클래스나 메소드를 일반화 시키는 기법 <E>, <K>, <V>
("Element" (요소), "Key" (키), "Value" (값) - 다른 의미로 사용할 수도 있음) : 타입 매개 변수


컬렉션은 Generics 기법으로 구현된다
컬렉션의 요소는 객체만 가능하므로 기본적으로 int, char, double 등 기본 타입의 사용이 불가
그래서 특정 타입만 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록
클래스나 메소드를 일반화 시키는걸 Generics이라고 한다


Generics를 사용하는 이유
컴파일 단계에서 잘못 된 타입 사용할 수 있는 문제를 제거한다
컬렉션에 저장 된 여러 종류의 객체를 꺼내서 사용할 때 객체의 종류에 따라
매번 형변환을 해야하기 때문에 코드가 복잡해진다
컬렉션, 람다식(함수적 인터페이스), 스트림, NIO에서 널리 사용한다.
Generics를 모르면 API Document 해석이 어렵기 때문에 학습에 제한이 생긴다


Generics 타입은 두 개 이상의 타입 파라미터를 사용 가능하다
각 타입 파라미터는 콤마로 구분하여 사용하면 된다


Generics 타입을 부모 클래스로 사용해야 할 경우에는
타입 파라미터는 자식 클래스에도 기술해야 하며, 추가적인 타입 파라미터를 가질 수 있다
public class ChildProduct<T, M> extends Product<T, M>{...}
public class ChildProduct<T, M, C> extends Product<T, M>{...}


//제네릭을 사용하면 구체적인 데이터 타입을 인스턴스에 따라 지정할 수 있어
중복의 제거와 타입의 안정성을 동시에 추구할 수 있다
여기서는 <K, V> 사용해서 타입 오류를 방지
KeyValue<String, Integer> kv1 = new KeyValue<>();
KeyValue<Integer, String> kv2 = new KeyValue<>();
KeyValue<String, Void> kv3 = new KeyValue<>();
다 다른 자료형을 리턴 값으로 받지만 제네릭을 씀으로 하나의 코드로 만들 수 있다


Generics을 사용하는 이유
타입의 안정성, 코드의 간결화
구체적인 데이터 타입을 인스턴스에 따라 지정할 수 있어 중복의 제거와 타입의 안정성을 동시에 추구할 수 있다


1. 복수의 Generics
class Person<T, S>


2. 기본 데이터 타입과 Generics
참조 데이터 타입에서만 사용할 수 있다 wrapper 클래스를 사용해야 한다


3. Generics의 생략
매개변수의 데이터 타입을 알고 있으면(위에 적었다면) 생략해도 된다.


4. 메소드에 적용
클래스에서만 쓸 수 있는 것이 아니라 메소드에서도 쓸 수 있다


5. Generics의 제한
Generics로 올 수 있는 데이터 타입을 특정 클래스의 자식으로 제한 할 수 있다
class Person<T extends Info> { }


6. Generics 클래스 사용법
Generics 타입은 타입을 파라미터로 갖는 클래스와 인터페이스를 말한다
Generics 타입은 클래스 또는 인터페이스 이름 뒤에 <> 부호가 붙고 사이에 타입 파라미터가 위치한다
public class 클래스명 <T> {...}
public interface 인터페이스명<T> {...}


7. Generics 클래스 예시
public class GenericBox<T> {
private T data;
여기서 <T>를 타입파아미터 라고 한다 또는 가상의 자료형이라고 하고
메서드 호출과 비슷하게 이해할 수도 있는데 Generic Box라는 메서드에 Stirng 이라는 인자를 넘겨서 String 타입의 Generic Box를
리턴 받는다는 의미이다 Generic Box<String> generic Box = new Generic Box<>();
generic Box.setData("내 문자열");


interface ExInterfaceGeneric<T> {
T example();
}


class ExGeneric implements ExInterfaceGeneric<String> {
@Override
public String example() {
return null;
}
}
인터페이스도 클래스처럼 Generics로 설정해두고 활용할 수 있다


와일드카드는 제네릭 타입을 매개 값이나 리턴 타입으로 사용할 때
구체적인 타입 대신 사용하는 것으로 코드에서 ?로 표현된다.


제네릭타입<?> : 모든 클래스 / 인터페이스 타입이 올 수 있다.
제네릭타입<? extend 상위타입> : 상위타입 또는 상위타입을 상속받은 하위 객체만 타입으로
지정할 수 있다.
제네릭타입<? super 하위타입> : 하위타입 또는 하위타입이 상속하고 있는 상위 객체만 타입으로
지정할 수 있다.
public void myMethod(ArrayList<? extends Number> list) { . . . }
메소드가 받아들일 매개변수 ArrayList 타입 변수는 Number 클래스와
Number 클래스를 상속받은 클래스들의 객체들만 받는다라고 명시한 것


// 제네릭 타입 범위 제한(Bound)
class Goods<T>{
private T t;
public T get(){
return t;
}
public void set(T t){
this.t= t;
}
제네릭 파라미터 <T>에 들어갈 수 있는 타입은??
D->C->B->A 유형이 있다고 할 때 유형별로 알아보기.


1. 접근지정자 메서드이름 ( 제네릭 클래스명<제네릭 타입명> 참조변수명){ }
ex) method(Goods<A> v) -: A타입만 가능하다.
2. 접근지정자 메서드이름(제네릭 클래스명 <?> 참조변수명) {}
ex) method(Goods<?> v) -: A, B, C, D 타입 모두 가능하다.
3. 접근지정자 메서드이름 ( 제네릭 클래스명<? extends 제네릭 타입명> 참조변수명){ }
ex) method(Goods<? extends B> v) : B, C, D만 가능하다.
4. 접근지정자 메서드이름 ( 제네릭 클래스명<? super 제네릭 타입명> 참조변수명){ }
ex) method(Goods<? super B> v) : A, B만 가능하다








// StringTokenizer: 문자열 관련 클래스
import java.util.StringTokenizer; 를 해야 사용 가능
StringTokenizer 클래스는 각 문자열을 토큰 단위로 분류한다
StringTokenizer의 생성자를 활용해 저장 된 문자열의 분기점을 지정할 수 있다
"/" 문자를 분기로 문자열 분리
st 객체는 위위 초기화를 통해 문자열 배열 형태로 변경 됨
hasMoreTokens 메소드는 객체에 다음 토큰이 있는지 확인
있으면 true 없으면 false로 반환




// 다중 catch문의 특징
자바 명령문이 많아지면 발생할 수 있는 Exception의 종류도 많아진다
다중 catch문은 순차적으로 해당 예외를 체크한 후에 예외 처리를 한다
다중 catch문 구현 시 Exception 계층 구조에서 상위 클래스 타입 매개변수를 가지는 catch문은 뒤에 위치시켜야 한다


최상위: Exception 상위: IOException 하위: FileNotFoundException
finally문 -- 예외 발생 유무와 상관없이 실행하는 부분




// throws 처리 방식
예외 발생 시 발생한 예외를 메서드를 호출한 곳으로 전달하여 예외 처리를 한다
최초 메서드를 호출한 main( ) 메서드에서는 try/catch문으로 예외 처리를 해야 한다
RuntimeException 계열은 throws할 필요가 없다


예외(Exception): 연산오류, 포맷오류 등 상황에 따라 개발자가 해결 가능한 오류


에러(Error): JVM 자체의 오류로 개발자가 해결할 수 없는 오류


일반 예외 (Checked Exception) Exception으로 부터 바로 상속


예외처리를 하지 않으면 컴파일 자체가 불가능


실행예외(RuntimeException) RuntimeException으로 부터 바로 상속
컴파일은 가능하나 실행 중 예외가 발생하면 프로그램 종료




// try/catch문으로 예외 처리한 경우
예외가 발생하면 JVM에게 예외를 던진다
JVM은 발생한 예외를 분석한 후 ArrayIndexOutOfBoundsException 객체를 생성한다
JVM은 생성된 예외 객체를 발생된 곳을 던진다
JVM이 던지 예외 객체를 catch 블록이 잡는다
예외 처리를 한 후 프로그램이 정상 종료한다




// 다중 catch문의 특징
자바 명령문이 많아지면 발생할 수 있는 Exception의 종류도 많아진다
다중 catch문은 순차적으로 해당 예외를 체크한 후에 예외 처리를 한다
다중 catch문 구현 시 Exception 계층 구조에서 상위 클래스 타입 매개변수를 가지는 catch문은 뒤에 위치시켜야 한다
최상위: Exception 상위: IOException 하위: FileNotFoundException
finally문 -- 예외 발생 유무와 상관없이 실행하는 부분




// List 컬렉션
컬렉션 프레임워크를 상속받고 있는 List 컬렉션은 객체를 일렬로 늘어놓은 구조를 가지고 있다
List 컬렉션은 객체를 인덱스로 관리하기 때문에 객체를 저장하면 자동 인덱스가 부여되고
인덱스로 객체를 검색, 삭제할 수 있는 기능을 제공한다
(인덱스에는 데이터가 저장되어 있는 기능 참조 값을 가지고 있다)
List 컬렉션은 객체 자체를 저장하는 것이 아니라 객체의 번지를 참조하는 것,
동일한 객체를 중복 저장할 수 있는데 이 경우 동일한 번지가 참조된다
null도 저장 가능 한데 이 경우 해당 인덱스는 객체를 참조하지 않는다
ArrayList, LinkedList, Vector 이 3가지 클래스는
List 인터페이스를 같이 상속하고 있으며 공통적으로 사용할 수 있는 메소드 들이 많다


List 컬렉션 - 1 ArrayList
ArrayList는 List 인터페이스를 상속받은 클래스로 크기가 가변적으로 변하는 선형리스트이다
일반적인 배열과 같은 순차리스트이며 인덱스로 내부의 객체를 관리한다는 점이 유사하지만
한 번 생성되면 크기가 변하지 않는 배열과 달리
ArrayList는 객체들이 추가되어 저장용량(capacity)이 초과한다면
자동으로 부족한 크기만큼 저장용량이 늘어난다는 특징을 가지고 있다


List 컬렉션 - 2 ArrayList 선언
1. ArrayList list = new ArrayList(); // 타입 미설정 Object로 선언된다
선언 후 내부에 임의의 값을 넣고 사용할 수 있지만
이 방식을 사용할 경우 값을 뽑아내기 위해 캐스팅 연산이 필요하며
잘못된 타입으로 캐스팅 한 경우 에러가 발생하기에 추천하지 않는다


2. ArrayList<Student> members = new ArrayList<Student>(); // 형변환 필요 x
타입 설정, ArrayList를 설정하고 그 타입을 Student 객체만 사용가능


3. ArrayList<Integer> num = new ArrayList<Integer>();
타입설정 Integer로 지정 타입만 사용 가능


4. ArrayList<String> str = new ArrayList<String>();
타입설정 String 타입만 사용 가능


5. ArrayList<Integer> num2 = new ArrayList<>();
new에서 파라미터 생략 가능


6. ArrayList<Integer> num3 = new ArrayList<Integer>(10);
초기 용량<capacity) 지정, 리스트의 내부 배열의 초기 크기를 지정


7. ArrayList<Integer> list2 = new ArrayList<Integer> (Arrays.asList(1,2,3));
생성시 값 추가 고정크기의 리스트를 생성하여 ArrayList 생성자에 전달하여 새로운 ArrayList 생성하고 초기화 하는 방법입니다
ArrayList를 생성하면서 동시에 초기값을 제공




// ArrayList 특징
java.util.List 계열이다
객체(데이터)에 순서가 지정된다
모든 타입의 객체를 저장할 수 있다
저장하는 객체(데이터)의 개수에 제한이 없다
ArrayList는 List 인터페이스를 상속받은 클래스로 크기가 가변적으로 변하는 선형리스트이다


ArrayList는 스레드 동기화를 지원하지 않고 조금씩 용량을 늘리는 특징이 있습니다
일반적으로는 ArrayList를 사용하는 것이 성능면에서 더 효율적입니다


// addAll(value) : 해당 값을 모두 넣는다
// removeAll(value) : 해당 값을 모두 뺀다
// 차집합 : list1에서 list2랑 겹치는 값 제거
// 합집합: list1과 list2의 값 모두 포함 (중복 없이)
// 교집합: list1과 list2가 겹치는 값만 포함 (참고자료: ArrayListEx2)




// set 인터페이스는 요소의 순서를 유지하지 않으며 인덱스로 요소를 검색하는 get(index) 메서드를 제공하지 않습니다
get(index) 메서드는 List 인터페이스와 그 구현체들인 ArrayList, LinkedList 등에서 사용할 수 있습니다.
set은 요소의 순서를 유지하지 않는 자료구조이기 때문에 순서에 의존하여 요소를 가져오는 것은
보장되지 않습니다 따라서 set에서 요소를 순서대로 출력하거나
특정 인덱스의 요소를 가져오려면 Iterator를 사용하거나 foreach 루프를 활용해야 합니다




// HashSet은 순서를 유지하지 않는 자료구조이므로 요소들이 출력되는
순서는 예측할 수 없습니다 List 구조에 비해 속도가 느리다
Set은 비선형 구조이기에 순서가 없으면 그렇기에 인덱스도 존재하지 않는다
Set은 한 칸씩 저장공간을 늘리지 않고 약 2배로 늘리기에 여기서 과부하가 많이 발생한다




// HashMap<K, V>
1. key와 값(value)의 쌍으로 구성된 요소(entity)를 다루는 컬렉션
2. java.util.HashMap 을 import 해서 사용 가능
3. k는 key로 사용할 요소의 타입, V는 값으로 사용할 요소의 타입 지정
4. key와 value가 한 쌍으로 저장됨
5. key는 HashMap에 삽입되는 위치 결정에 사용
6. value를 검색하기 위해서는 key를 이용 (삽입, 삭제, 검색이 빠른 특징)


HashMap<String, String> h = new HashMap<String, String>();
h.put("apple", "사과"); // "apple" 키와 "사과" 값 쌍을 해쉬맵에 삽입
String kor = h.get("apple"); // "apple" 키로 값 검색 kor은 "사과"




Vector와 ArrayList는 모두 동적 배열을 구현


차이점
동기화 지원: Vector는 스레드 동기화를 지원
용량 증가: Vector는 요소가 추가될 때 내부 배열의 크기를 자동으로 증가
초기 용량 설정: Vector는 생성할 때 초기 용량을 설정
레거시 클래스: Vector는 자바의 초기 버전부터 존재하던 클래스


Vector에 객체 삽입
add(value) 메소드로 벡터의 맨 뒤에 객체 추가
add(index, value) 메소드로 벡터의 원하는 위치에 객체추가


Vector에서 객체 삭제
remove(index) 메소드로 임의의 위치에 있는 객체 삭제
(삭제 후 빈 공간은 자동으로 하나씩 당겨짐)




// 아스키(ASCII) vs. 유니코드(Unicode)
하나의 문자셋에 국가별 모든 문자셋 통합(Unicode)
아스키 미국정보교환표준부호
한글(영문/한자) 전용 문자셋: EUC-KR vs. MS949
EUC-KR KS 완성형: 초기의 한글완성형 문자셋
MS949 EUC-KR에 누락된 8,822자를 포함한 한글기본 문자셋
Windows에서 사용되는 한글완성형 표기(2byte)
대표적인 유니코드 문자셋: UTF-16 vs. UTF-8
UTF-8 고정 길이 문자 인코딩 방식(2 byte): 영문 및 한글 동일
UTF-8 가변 길이 문자 인코딩 방식(1byte ~ 4byte)
대부분의 웹서버(Apache, IIS, NginX 등), 데이터베이스(MySQL 등), 기본 인코딩 방식
아스키 코드 해당 문자는 1byte, 한글은 3byte로 표현
자바의 문자셋(Charset) java.nio.charset.Charset 클래스로 정의




// Reader와 InputStream은 모두 데이터를 읽어오는데 사용되는 추상 클래스입니다
데이터 유형: Reader는 문자 데이터를 다루는데 사용되고, InputStream은 바이트 데이터를 다루는데 사용됩니다
읽기 방식: Reader는 문자 단위로 읽기 위한 메서드를 제공합니다 InputStream은 바이트 단위로 읽기 위한 메서드를 제공합니다
하위 클래스: Reader의 하위 클래스에는 FileReader, InputStreamReader 등이 있고, InputStream의 하위 클래스에는
FileInputStream, ByteArrayInputStream 등이 있습니다




// 스트림 (Stream)
1. 스트림은 데이터를 송수신하기 위한 통로의 개념으로서 입력 혹은 출력 단방향으로만 진행된다
2. 스트림은 1바이트를 처리하는 바이트 스트림과 2바이트를 처리하는 문자 스트림으로 나뉜다
3. 바이트 스트림: FileInputStream, FileOutputStream 등
4. 문자 스트림: BufferedReader, BufferedWriter, FileReader, FileWriter 등
5. 한글은 유니코드이기 때문에 2바이트 단위이므로 문자 스트림을 사용하는 것이 편리하다


char 단위의 입력 Reader 출력은 Writer
FileInputStream 생성자
FileInputStream(File File)
FileInputStream(String name)


스트림 입출력 FIFO
버퍼를 가지고 순차적으로 이루어지는 입출력 스트림은 단방향


자바의 입출력 스트림
응용프로그램과 입출력 장치를 연결하는 소프트웨어 모듈
입력 스트림: 입력 장치로부터 자바 프로그램으로 데이터 전달
출력 스트림: 출력 장치로 데이터 출력
스트림은 연결될 수 있다


스트림은 프로그램과 외부 매체와의 통로 역할을 한다
파일 읽기 (1단계)
읽기용: FileInputStream 변수명 = FileInputStream("파일명(경로포함)");
읽기용: FileOutputStream 변수명 = FileOutputStream("파일명(경로포함)");


파일 처리 (2단계)
데이터를 쓰거나 파일로부터 데이터를 읽어 올 수 있는 상태


파일 닫기 (3단계)
변수명.close();


File 클래스 사용법
File file = new File("파일명");
File file = new File("파일경로", "파일명");


파일에 데이터 쓰기 과정
키보드 입력 PrintWriter[println()] FileWriter -> write.txt
파일에 데이터 읽기 과정
write.txt -> FileReader BufferedReader[readLine()] -> 모니터 출력




// FileReader 클래스는 파일을 읽는 기능을 제공하지만
단순히 파일을 한 문자씩 읽어 오는 기능에 불과합니다
BufferedReader 클래스는 FileReader 객체를 생성자로 받아들여
내부적으로 버퍼를 사용하여 효율적인 파일 읽기를 지원합니다
BufferedReader 클래스는 read()및 readLine()과 같은 메서드 제공




// 컨테이너와 컴포넌트의 포함 관계
1. 최상위 컨테이너: 다른 컨테이너에 속하지 않고 독힙적으로 출력 가능한 컨테이너 (JFrame, JApplet, JDialog, JWindow)
2. 컨테이너: 다른 컨테이너에 포함될 수 있고, 컴포넌트를 포함할 수 있다(JPanel 등)
3. 컴포넌트: 컨테이너에 포함되어야 화면에 출력 가능 (JButton, JLabel, JTextFiled 등)




// 이벤트 리스너란?
이벤트를 처리하는 코드, 클래스로 작성(ex. 엿 듣고 있는 것)
이벤트 처리를 위해서는 이벤트 발생시킬 컴포넌트에 이벤트 리스너를 연결해야 한다
JDK에서 이벤트 리스너 작성을 위한 인터페이스 제공
개발자가 리스너 인터페이스의 추상 메소드 구현, 이벤트가 발생하면
자바 플랫폼은 리스너 인터페이스의 추상 메소드 호출


ex) ActionListener 인터페이스
interface ActionListener { 아래 메소드를 개발자가 구현해야 한다
public void actionPerformed(ActionEvent e); // Action 이벤트 발생시 호출된다


ex) MouseListener 인터페이스
interface MouseListener { 아래의 5개 메소드를 개발자가 구현해야함


container c = getContentPane()
스윙에서는 컨텐트팬 (content pane)에만 컴포넌트를 부탁할 수 있다.
즉) container c = getContentPane() 활용하면
JFrame의 컨테이너들의 속성(메소드)를 여러개 추가할 수 있다


ActionListener
버튼을 클릭하거나 메뉴를 누르거나 텍스트 필드 등에서 Enter를 눌렀을 때
발생하는 이벤트Listener.ActionListener는 인터페이스로 처리한다
즉) actionPerformed(ActionEvent e) 액션리스너 이벤트가 발생했을 때
실질적으로 실현되는 메소드로 꼭 필요한 것


프레임 종료 버튼이 클릭될 때 프레임을 닫고 응용 프로그램이 종료하도록 하는 방법
Frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
응용 프로그램 내에서 스스로 종료
언제 어디서나 무조건 종료 System.exit(0);


프레임 종료버튼(X)이 클릭되었을 때 상황
프레임을 종료하여 프레임 윈도우가 닫힘
프레임이 화면에서 보이지 않게 되고 응용 프로그램이 사라짐
프레임이 보이지 않고 되지만 응용 프로그램이 종료한 것이 아님
키보드나 마우스 입력을 받지 못함
다시 setVisible(true)를 호출하면 보이게 되고 이전처럼 작동함


class MymouseListener implements MouseListener{
아래의 5개 메소드를 개발자가 구현해야함, mouseclicked, mouseentered, mouseExited
public void mousePressed(MouseEvent e); // 마우스 버튼이 눌러지는 순간 호출
public void mouseReleased(MouseEvent e); //눌러진 마우스 버튼이 떼어지는 순간 호출
c.addMouseListener(new MyMouseListener());
만약 interface MouseListener 을 사용하면, 리스너 작성시 추상 메소드를 모두 구현해야 한다
즉) mousePressed()만 사용하려고 해도 나머지 4개를 무조건 적어야하는 부담이 생긴다.
이럴 때 어댑터 클래스를 사용한다.
어댑터 클래스란? 리스너의 모든 메소드가 단순 리턴하도록 구현해 놓은 클래스
ex) 마우스 리스너를 예로 들었을 때
class MouseAdapter implements
MouseListener, MouselotionListener, MouselheelLsitener {} 이므로
활용하지 않는 추상 메소드 구현하지 않아도 된다.
리스너 인터페이스에서 대응하는 어댑터 클래스가 전부 있는건 아니다
KeyListener는 KeyAdapter가 있다 MouseAdapter도 있다
ActionListener는 대응 어댑터가 있다




// 배치 관리자 4가지 유형 FlowLayout BorderLayout GridLayout CardLayout
FlowLayout 컨테이너 공간내에 왼쪽에서 오른쪽으로 배치한다
배치관리자가 없는 컨테이너, Container.setLayout(null)
Container.setLayout(LayoutManager lm) 컨테이너 새로운 배치관리자를 설정
lm을 새로운 배치관리자로 설정


// 사용자의 키보드 조작에 따른 이벤트 발생
키를 누르는 순간, 누른 키를 때는 순간(UNICODE 키 경우에만)


★키 이벤트를 받을 수 있는 조건
모든 컴포넌트가 가능하지만, 현재 포커스(focus)를 가진 컴포넌트


// 포커스란
컴포넌트나 응용프로그램이 키 이벤트를 독점하는 권한


컴포넌트에 포커스 설정하는 방법
setVisble(true) // 스윙 프레임 출력 이후에 포커스를 추가해야한다
component.setFocusable(true);
component가 포커스를 받을 수 있도록 설정
자바 플랫폼마다 실행 환경의 초기화가 다를 수 있기 때문에 필요한 코드이다


//가상키
유니코드든 아니든(제어키) 모든 키에 자바의 가상 키 코드가 정의되어 있음
가상 키 코드는 KeyEvent 클래스에 상수로 선언
VK_0 ~ VK_9 0에서 9까지의 키 유니코드 값과 동일하다




모든 컴포넌트는 자신의 모양을 스스로 그리는데,
컨테이너는 자신을 그린 후 그 위에 자식 컴포넌트들에게 그리기를 지시한다.
모든 스윙 컴포넌트는 자신의 모양을 그리는 paintcomponent() 메서드를 보유한다.
@overried!
public void paintComponent (Graphics g) :
스윙 컴포넌트가 자신의 모양을 그리는 메서드로 컴포넌트가 그려져야 하는 시점마다,
크기가 변경되거나 위치가 변경되거나 가려졌던 것이 사라지는 등 이런 시점마다 호출된다.
paintComponent()는 페인팅 메카니즘에 의해 자동으로 호출되므로
개발자가 직접 호출하면 안 된다.
super.paintComponent(g) 이 문장은 그림이 그려지는 컴포넌트가 I
apane1이나 JLabel처럼 그래픽 컴포넌트인 경우,
paintComponent 메소드를 재정의 할 때 내부에 호출되면 좋은 문장이다.
그래픽 컴포넌트를 상속받았을 때, 부모 클래스가 그려야 될 부분도 있기 때문이다.
자기 그림만 그리고 종료해버리면 부모 클래스는 그릴 기회를 얻지 못한다.


(1) 프로세스
(1) 정의 : CPU가 실행 중인 프로그램
(2) 구성 요소 : 2진 명령어와 Data로 구성
(2) 프로세스 관련 용어
- 멀티 프로세싱 : 2개 이상의 CPU에 의해 여러 개의 프로그램이 동시에 실행되는 것
- 멀티 프로그래밍 : 하나의 CPU에서 여러 개의 프로그램이 동시에 실행되는 것
- 멀티 태스킹 : 멀티 프로그래밍과 비슷한 개념으로 여러 개의 task를 동시에 실행하는 것


※ 멀티 태스킹(multi-tasking) :
여러 애플리케이션을 동시에 실행하여 컴퓨터 시스템의 성능을 높이는 기법
※ 멀티 스레딩(multi-threading) :
하나의 프로그램이 동시에 여러 가지 작업을 할 수 있도록 하는 것


(4) 프로세스 내의 각각의 작업은 스레드(thread)라고 부른다
- 프로세스(process) : 자신만의 데이터를 가진다
- 스레드(thread) : 동일한 데이터를 공유한다
(5) 하나의 프로세스 안에는 최소 하나 이삭의 스레드가 존재하다


자바 쓰레드 스케줄링 방식
자바는 우선순위가 높은 스레드가 먼저 실행되는 선점형 스케줄링 방식을 사용한다
자바 쓰레드 생성 방법
java.lang.Thread 클래스 이용
java.lang.Runnable 인터페이스 이용


(2) 스레드를 생성하는 방법
1 Thread 클래스를 상속하는 방법
- Thread 클래스를 상속받은 후에 run() 메소드를 재정의
- run() 메소드 안에 작업을 기술
2 Runnable 인터페이스를 구현하는 방법 ..
— 우선순위 (주로 사용됨)-
- run() 메소드를 가지고 있는 클래스를 작성
- 이 클래스의 객체를 Thread 클래스의 생성자를 호출할 때 전달
- 자바에서 다중 상속이 불가능한 것을 감안한다면 Runnable 인터페이스를 사용하는 것이 좋다
- Runnable 인터페이스를 사용하면 고수준의 스레드 관리 API도 사용할 수 있다


CPU 스케줄링.. 선점형, 비선점형, 혼합형
(1) 정의: 운영체제가 작업을 처리하기 위해 각 프로세스에 CPU 를 적절히 할당
멀티 스레드가 동작할 때 어떤 스레드를 먼저 수행할 것인지를 결정하는 작업
우선순위가 높은 스레드가 먼저 실행되는 선점형 스케줄링 방식 사용


Thread 클래스는 java.lang 패키지 안에 들어 있어 import할 필요 없음
MyThread 클래스는 하나의 메소드 run() 만을 가지고 있음
run()은 스레드가 시작하면 자바 런타임 시스템에 의해 호출
스레드가 실행하는 모든 작업은 run() 메소드 안에 있어야 함


스레드의 상태(state)
Runnable 상태: 스레드를 실행하기 위한 준비 상태
Running 상태: 스레드 스케줄러가 선택된 스레드를 실행하는 상태
Blocked 상태: 스레드가 작업을 완수하지 못하고 잠시 작업을 멈추는 상태
new -> Runnable -> Running -> Dead


Start() 호출 -> 스레드가 실행준비 -> 스케쥴러에 의해 스레드가 선택 -> 실행
-> 스레드가 완료하지 못하고 대기상태로 전환(sleep(), yield(),join() 호출)
-> 대기상태에서 다시 준비상태로 전환


yield() 특징
현재 실행하는 스레드가 다른 스레드를 실행하도록 실행을 중지한다
호출방법 Thread.yield();
실행 중인 스레드가 호출된다


스레드 동기화(synchronized)
멀티스레드 프로세스의 경우 여러 쓰레드가 같은 프로세스 내의 자원을 공유해서 작업하기 때문에
서로의 작업에 영향을 주게 된다
따라서 스레드 동기화는 한 번에 한 개의 스레드만 객체에 접근할 수 있도록
객체에 락을 걸어서 데이터의 일관성을 유지하는 것이다
공유 데이터를 사용하는 코드 영역을 임계영역으로 지정해놓고
공유 데이터(객체)가 가지고 있는 lock을 획득한 단 하나의 스레드만
이 영역 내의 코드를 수행할 수 있게 한다

Lock은 일반적으로 synchronized 키워드를 사용하여 구현됩니다.
락을 확보한 스레드가 임계 영역을 빠져나갈 때 학은 자동으로 해제되어
다른 스레드와 동기화 블록이 있다
메소드 앞에 synchronized를 붙이면 메소드 전체가 임계 영역으로 설정된다.
쓰레드의 동기화의 효율을 높이기 위해서 wait(), notify(), notifyAll() 사용한다

Object 클래스에 정의되어 있으며, 동기화 블록내에서만 사용할 수 있다
wait(): 객체의 lock를 풀고 해당 객체의 쓰레드를 waiting pool 객체에 넣는다
notify(): waiting pool에서 대기 중인 스레드 중의 하나를 깨운다
notifyAll(): waiting pool에서 대기중인 모든 쓰레드를 깨운다.

1. 공유 데이터를 접근하는 모든 스레드를 한 줄로 세워 한 스레드가 공유 데이터에 대한 작업을 끝낼 때 까지 다른 스레드가 대기하도록 하는 것
2. synchronized로 동기화 블록 지정
public synchronized void method_Name() {
    // 동기화 할 내용
}

스레드의 상태 제어 메서드 들
sleep() 특징
sleep(long millis)
Thread.sleep() 메소드는 현재 쓰래드가 일정 기간동안 실행을 중지시킨다 우선순위가 낮은 스레드가 기아 상태에 빠지는 것을 방지할 수 았다

join 특징: 다른 쓰레드의 작업을 기다린다
join 은 한 쓰레드가 다른 쓰레드의 완료를 기다리게 한다
만약 t가 현재 동작중인 스레드의 객체라고 한다면
t.join(); 이 코드는 현재 쓰레드가 t 쓰레드가 종료될 때까지 실력을 중단합니다

yield() 특징: 다른 쓰레드에게 양보한다
yield() 메소드를 호풀한 스레드는 실행 대기 상태로 돌아가고 동일한 우선순위
또는 높은 우선 순위를 갖는 다른 스레드가 실행기회를 가질 수 있도록 해준다
예를 들어 스케쥴러에 의해 1초의 실행시간을 할당받은 쓰레드가 0.5초의 시간동안 작업한 상태에서
yield()가 호출되면 나머지 0.5초는 포기하고 다시 실행 대기상태가 된다
호출 방법 Thread.yield(); CPU의 자원의 소모 방지

동기화(synchronized)의 의미
하나의 작업이 완전히 완료된 후 다른 작업 수행
비동기식: 하나의 작업 명령이후 (완료와 상관없이) 바로 다른 작업 명령을 수행
동기화 (synchronized)의 필요성
두 개의 Thread가 하나의 객체를 공유하는 경우


// 스토리보드란?

1. UX 구현에 수반되는 사용자와 목표, 인터페이스 간 상호작용을 시각화하여 개발자, 디자이너의 의사소통을 돕는 도구
2. 완성해야 할 서비스와 예상되는 사용자 경험을 미리 보기 위한 방법이다

작성법
1. 스토리보드 표지엔 프로젝트 명, 문저버전정보, 최종업데이트 일자, 작성자 등의 정보 기재
- 협업 프로젝트에서 버전 관리 정보가 중요하다 팀 전체가 내용을 공유, 유기적 개발 진행

Wireframe
1. UI 중심의 화면 레이아웃을 설계하여 선과 뼈대를 만드는 것
    시각적인 프레임워크, 버튼배치, 페이지 요소 등의 계층 구조 등
    페이지 구조와 구조성 측면의 결과를 통합적으로 적용하는 작업이다

1. Mockup: 실물과 흡사한 (정적인)형태의 모형이며 서비스 개발 전에 결과물을 그려 보는 것.
2. Prototype: 다양한 인터렉션을 결합하여 실제 서비스처럼 작동하는 (동적인)형태의 모형을 작성하는 것.

메인스레드는 자바 프로그램을 실행할 때 자동으로 생성되는 기본적인 스레드

실행순서:
두 개의 쓰레드가 번갈아가며 실행되기 때문에 출력 순서는 보장되지 않습니다
1. th1과 th2 메서드가 시작되고 th1의 run() 메소드와 th2의 run() 메소드가 동시에 실행
2. th1의 run() 메소드에서 월요일 대박을 출력하다가 i가 3이 되면 Thread.yield()를 호출하여 실행 양보에 들어간다
3. th2의 run() 메소드에서 Thread.yield()를 호출한 후 "대박"을 출력
4. main() 메소드의 for 문 루프에서 th1.join() 과 th2.join()을 호출하여 th1과 th2 쓰레드의 실행을 완료할 때까지 대기합니다
5. Thread.sleep(1000)을 통해 1초 동안 대기한 후, 다음을 반복을 수행한다
6. 위 과정을 20번 반복합니다


네트워크 기본 개념 192.168.0.97 ipconfig 확인할 수 있다
서버(Server) : 사용자들에게 서비스를 제공하는 컴퓨터
클라이언트(Client): 서버에게 서비스를 요청해서 사용하는 컴퓨터

DNS (Domain Name System): 숫자 대신 기호를 사용하는 주소 53포트
DNS 서버: 기호 주소를 숫자 주소가 변환해주는 서버 도메인이름을 ip주소로
URL(uniform Resource Locator): 인터넷 상의 자원을 나타내는 약속
인터넷 상의 파일이나 데이터베이스같은 자원에 대한 주소를 지정하는 방법이다
프로토콜이름 ://호스트이름/파일이름:포트번호 http://www.naver.com/index.html:80

IP 주소란?
인터넷 상에서 장치간 통신을 위해 장치를 식별하는 주소
IPv4 VS IPv6

IPv4:
현재 일반적으로 사용되는 주소로 32bit 구성 (약 43억개)
[0-255]. [0-255]. [0-255]. [0-255]와 같이 10진수 4개를 '.'으로 구분하여 표기
ex) 192.168.0.97
특정 IP는 특별용도로 사용 ex) 127.0.0.1 (로컬호스트(루프백) 주소)

IPv6: - IPv4에서의 IP 부족현상을 해결하기 위한 방법으로 128bit(16byte)로 구성 (43억 * 43억 * 43억 * 43억)

사설 IP:
내부망 내에서만 한정적으로 사용되는 IP
내부에서만 사용되기 때문에 네트워크별로 중복 가능하다.

포트:
호스트 내에서 실행되고 있는 프로세스를 구분하기 위한 16비트의 논리적 할당(0~65535).
호스트의 IP가 집주소에 해당하는 개념이라면 포트는 방번호에 해당한다.
호스트의 IP가 컴퓨터를 찾기 위한 정보라면 포트는 프로그램에 해당한다. (어떤 프로그램이 사용하는 정보인지)
대표적인 80포트는 HTTP 웹 서비스를 의미한다.

TCP:
신뢰성이 높다 (오류 발생 시 재전송).
연결형 프로토콜: 통신 과정에서 연결 유지가 필요하다 (통신 상대가 많은 경우 시스템 부하가 높아질 수 있다).
전송 데이터 크기는 제한이 없다.

UDP:
신뢰성이 낮음 (오류 발생 시 또는 미전달 시 데이터그램(전달 데이터) 삭제).
비연결형 프로토콜: 통신 과정에서 연결 유지가 불필요하다 (통신 상대가 많아도 시스템 부하가 낮다).
전송 데이터의 크기는 65,536 바이트(헤더 포함)로 초과 시 나누어 전송한다.
실시간성과 같은 성능이 중요한 서비스에 주로 사용된다.
우편(소포) 통신과 유사한 개념이다.
서버와 클라이언트 간의 연결 및 통신 과정:

서버가 시작된다.
연결 요청.
소켓 생성하여 연결 준비를 한다.
연결 요청.
클라이언트의 출력 스트림이 연결된다.
클라이언트의 입력 스트림이 연결된다.

1. ServerSocket 객체 생성:
ServerSocket server = new ServerSocket(portNumber, queueLength);

2. accept() 메소드 호출:
Socket clientSocket = server.accept();

3. 소켓으로부터 스트림 객체를 얻는다:
InputStream input = clientSocket.getInputStream();
OutputStream output = clientSocket.getOutputStream();

ServerSocket은 서버에서 클라이언트의 연결 요청을 받기 위한 객체이며,
accept() 메소드를 호출하여 클라이언트와의 실제 연결을 수락합니다.
그 후, 클라이언트와의 데이터 통신을 위해 소켓으로부터 InputStream과 OutputStream 객체를 얻습니다.

4. 상호 대화 단계
read()와 write() 사용

5. 종료
close() 사용
BufferdWriter와 FileWriter
BufferedWriter는 FileWriter 없이 사용할 수 없음(의존성)

URL은 DNS 서버를 통해 IP 주소로 변환될 수 있습니다
로케이터는 위치 어디에 해당됩니다 리소스가 실제로 존재하는 위치

URI 식별자 입니다 무엇인지에 해당됩니다
즉 URL은 URI 이지만, URI는 URL이 아닙니다
식별자이기 때문에 주소로 변환되지는 않아요

포트(port): 가상적인 통신 선로