package study_0608;


/*
 * 
 컬렉션(바구니)은 객체를 저장하므로, 기본 데이터 타입은 사용할 수 없고, 대신에 래퍼 클래스(Integer, Double, Character 등)를 사용해야 합니다.
 
--- 필요에 따라 배열과 제네릭을 혼합하여 사용하면 됩니다.
특정 타입만, 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록
클래스나 메소드를 일반화 시키는 기법 <E>, <K>, <V> : 타입 매개 변수

컬렉션은 제너릭 (generics) 기법으로 구현된다. <일반화> ->  구체화
컬렉션의 요소는 객체만 가능하므로 기본적으로 int, char, double 등 기본 타입의 사용이 불가능 합니다.
그래서 특정 타입만 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록 클래스나 메소드를 일반화 시키는 걸 제네릭 이라고 합니다.

제네릭스를 사용하는 이유
컴파일 단계에서 잘못된 타입 사용할 수 있는 문제를 제거한다.
컬렉션에 저장된 여러 종류의 객체를 꺼내서 사용할 때 객체의 종류에 따라 매번 형변환을 해야하기 때문에 코드가 복잡해집니다.
컬렉션, 람다식 (함수적 인터페이스), 스트림, NIO에서 널리 사용한다.
제네릭스를 모르면 API Document 해석이 어렵기 때문에 학습에 제한이 생긴다.

제네릭 타입은 두 개 이상의 타입 파라미터를 사용 가능하다.
각 타입 파라미터는 콤마로 구분하여 사용하면 된다.

제네릭스 타입을 부모 클래스로 사용해야 할 경우에는 , 타입 파라미터는 자식 클래스에도 기술해야하며,
추가적인 타입 파라미터를 가질 수 있다.

public class ChildProduct<T,M> extends Product<T,M> {....}
public class ChildProduct<T,M,C> extends Product<T,M> {....}

*/




