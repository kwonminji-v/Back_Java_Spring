package study_0607;


public interface Ex_3_ramda {
	int calc(int x);
}

/*
 람다식
 JDK 8부터 도입한 함수형 프로그래밍 기법 중 하나
 자바는 익명 구현 객체 대신에 람다식을 메서드의 인수로 사용하도록 허용한다.
 람다식은 메서드를 감싼 익명 구현 객체를 자바가 전달할 수 있는 코드 블록처럼 흉내 낸 것
 자바는 익명 구현 객체를 람다식으로 표현해 함수형 프로그래밍을 모방한 것
 람다식을 사용하면 익명 객체보다 프로그램의 간결설 및 가독성이 향상된다.
 
 매개변수가 하나 있다면 괄호를 생략 가능하다.
 실행문이 하나라면 중괄호와 세미콜론을 생략 가능 
 단) 실행문이 return 문이면 return 키워드도 생략 가능
 
 선언부, 2개 이상의 매개변수를 콤마로 연결할 수 있다.
 자바는 새로운 함수 문법을 정의한 것이 아니라 이미 있는 인터페이스를 빌어 람다식을 표현
 함수적 인터페이스의 메서드만 람다식 표현 가능
 
 리턴타임 메서드이름 (매개변수) {
 			--> 메서드 내용 
 }
 
 위의 코드를 
 (타입 매개변수) -> {실행문; 실행문;} 으로 변경하여 표현이 가능하다.
 */

//1번 interface A {
//	void abc();
//}
//
//2번 A a = new A() {
//	void abc() {
//	//메서드 내용
//	}
//};
//
//2번을 람다식으로 표현하면
//A a = () ->  {  
//	//메서드 내용
//};
//
//3번 a.abc()

/*
(   )  매개변수 리스트에는 함수에 전달되는 매개변수들이 나열 
애로우 토큰(->)은 매개변수 리스트와 함수 코드를 분리시키는 역할이다.
{   }  함수 바디 : 함수 바디는 함수의 코드이다. 

 */


