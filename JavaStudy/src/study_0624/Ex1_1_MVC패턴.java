package study_0624;


/*
- MVC 패턴 사용하는 이유
		사용자가 보는 페이지, 데이터 처리, 그리고 이 2가지를 중간에서 제어하는 컨트롤
		이 3가지로 구성되는 하나의 애플리케이션을 만들면 각각맡은바에만 집중을 할 수 있게 된다.
		공장에서도 하나의 역할들만 담당을 해서 처리를 해서 효율적이게 되는 것처럼.
		서로 분리되어 각자의 역할에 집중할 수 있게끔하여 개발을 하고 그렇게 어플을 만든다면,
		유지보수성, 애플리케이션의 확장성, 그리고 유연성이 증가하고,
		중복코딩이라는 문제점 또한 사라지게 되는것이다.

	1.뷰의 역할
			public void actionPerformed (ActionEvent e)
			액션리스너를 통해 버튼을 눌렀을 때 콘솔창이 뜨게 만든다.
			즉) 사용자에게 보여지는 화면을 구현하는게 뷰의 역할
			여기서 모델이 하는일에는 전혀 관여하지 않고 컨트롤러에게만 전달해준다.
			화면에서 발생한 이벤트와 입력 데이터들을 컨트롤러에 전달한다.

	2. 컨트롤러의 역할
		public void additle(String title, List movielist) {
		    try {
		        model. addTitle(title. movielist);
		    } catch(Exception e) {
		    e.printStackTrace();
		    }
		   뷰에서 받은 내용을 가지고 모델 메소드를 호출한다. / 이벤트에 대해서 적당한 모델을 선택한다.
		   
	3. 모델의 역할
		DATA 정보들의 가공을 책임지는 컴포넌트들을 말한다.
		public void addTitle(String title, List movieList) {
		movieList.add(title);
		}
		
		실질적으로 영화 제목을 저장하고, 삭제하고 파일을 저장하는 실질적인 클래스
		상대경로에 파일이 생성되고 저장한 값들일 출력된다. - 실제 기능을 처리한 후 결과를 컨트롤러에 반환한다.

*/
